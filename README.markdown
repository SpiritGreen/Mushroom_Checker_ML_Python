# Mushroom Checker

Учебный проект для курса "Практикум по созданию ML-сервисов на Python". Проект представляет собой ML-сервис для классификации грибов с использованием Telegram-бота для взаимодействия с пользователями.

## Описание

Mushroom Checker позволяет пользователям загружать данные о грибах в формате CSV или XLSX и получать предсказания съедобности с помощью трёх ML-моделей:
- Random Forest (1 токен)
- Gradient Boosting (2 токена)
- Neural Network (3 токена)

Сервис выполняет бинарную классификацию грибов на съедобные и ядовитые на основе характеристик, описанных в датасете [Mushroom Dataset](https://archive.ics.uci.edu/dataset/73/mushroom). Пользователи могут регистрироваться, авторизоваться, пополнять баланс, просматривать доступные модели, запускать предсказания и проверять их статус через Telegram-бота.

## Датасет

Сервис использует данные, основанные на [Mushroom Dataset](https://archive.ics.uci.edu/dataset/73/mushroom), который содержит описания 23 видов грибов с их характеристиками. Для корректной работы предсказаний загружаемый файл должен соответствовать структуре датасета. Сервис классифицирует грибы как съедобные (`e`) или ядовитые (`p`), если файл с данными правильно заполнен.

### Пример данных

Файл `data.csv` в корневой директории проекта является примером правильно заполненного датасета. Он содержит следующие столбцы:

- `id`: Уникальный идентификатор записи.
- `class`: Класс гриба (`e` — съедобный, `p` — ядовитый).
- `cap-diameter`: Диаметр шляпки.
- `cap-shape`: Форма шляпки.
- `cap-surface`: Поверхность шляпки.
- `cap-color`: Цвет шляпки.
- `does-bruise-or-bleed`: Образует ли гриб синяки или кровоточит.
- `gill-attachment`: Прикрепление жабер.
- `gill-spacing`: Расстояние между жабрами.
- `gill-color`: Цвет жабер.
- `stem-height`: Высота ножки.
- `stem-width`: Ширина ножки.
- `stem-root`: Корень ножки.
- `stem-surface`: Поверхность ножки.
- `stem-color`: Цвет ножки.
- `veil-type`: Тип вуали.
- `veil-color`: Цвет вуали.
- `has-ring`: Наличие кольца.
- `ring-type`: Тип кольца.
- `spore-print-color`: Цвет спорового отпечатка.
- `habitat`: Местообитание.
- `season`: Сезон.

Для успешного предсказания файл должен содержать все необходимые столбцы, как в примере `data.csv`.

## Структура проекта

- **`main.py`**: Входная точка для FastAPI-приложения.
- **`telegram_bot.py`**: Код Telegram-бота для взаимодействия с пользователями.
- **`services/`**: Бизнес-логика для аутентификации, предсказаний и управления транзакциями.
- **`models/`**: Pydantic-модели для валидации данных.
- **`db/`**: SQLAlchemy-модели для работы с базой данных.
- **`tests/`**: Тестирование функционала.
- **`logs/`**: Логи работы сервисов.
- **`Makefile`**: Автоматизация запуска и остановки сервисов.
- **`requirements.txt`**: Зависимости проекта.
- **`init_models.py`**: Инициализация ML-моделей в базе данных.
- **`celery_app.py`**: Конфигурация Celery для асинхронных задач.
- **`database.py`**: Настройка подключения к базе данных.
- **`data.csv`**: Пример данных для тестирования.

## Запуск проекта

### 1. Клонирование репозитория

```bash
git clone https://github.com/SpiritGreen/Mushroom_Checker_ML_Python.git
cd Mushroom_Checker_ML_Python
```

### 2. Создание виртуального окружения

```bash
python -m venv venv
source venv/bin/activate  # Для Linux/Mac
.\venv\Scripts\Activate.ps1  # Для Windows
```

### 3. Установка зависимостей

```bash
pip install -r requirements.txt
```

### 4. Запуск сервисов

Используйте `Makefile` для запуска всех сервисов (FastAPI, Celery, Redis, Telegram-бот):

```bash
make run
```

Это запустит:
- Redis
- Celery Worker
- Celery Flower
- FastAPI (Uvicorn)
- Telegram-бот

Логи сервисов будут сохранены в директории `logs/`.

### 5. Остановка сервисов

```bash
make stop
```

### 6. Перезапуск сервисов

```bash
make restart
```

### 7. Очистка логов и PID-файлов

```bash
make clean
```

## Использование Telegram-бота

Бот доступен по ссылке: [Mushroom Checker](https://t.me/mushroom_checker_bot)

### Команды бота

- `/start`: Приветствие и список команд.
- `/register`: Регистрация нового пользователя.
- `/login`: Вход в систему.
- `/models`: Просмотр доступных ML-моделей.
- `/predict`: Запуск предсказания (выбор модели и загрузка файла).
- `/balance`: Проверка текущего баланса.
- `/transactions`: История транзакций.
- `/payment`: Пополнение баланса.
- `/status <id>`: Проверка статуса предсказания по ID.

### Пример использования

1. **Регистрация**:
   - Отправьте `/register`.
   - Введите имя пользователя (например, `user1`).
   - Введите пароль (например, `password123`).

2. **Вход**:
   - Отправьте `/login`.
   - Введите имя пользователя (`user1`).
   - Введите пароль (`password123`).

3. **Пополнение баланса**:
   - Отправьте `/payment`.
   - Введите сумму (например, `5.0`).

4. **Просмотр моделей**:
   - Отправьте `/models`.

5. **Запуск предсказания**:
   - Отправьте `/predict`.
   - Выберите модель (1, 2 или 3).
   - Отправьте файл `data.csv` из корневой папки проекта.

6. **Проверка статуса**:
   - Используйте кнопку "Проверить статус" или команду `/status <id>` (например, `/status 1`).

## Тестирование

Для тестирования проекта используйте файл `data.csv`, расположенный в корневой директории проекта. Этот файл содержит примеры данных о грибах для предсказания.

## API Эндпоинты

FastAPI-приложение предоставляет следующие эндпоинты:

- **POST /register**: Регистрация пользователя.
- **POST /token**: Получение JWT-токена.
- **GET /users/me**: Данные текущего пользователя.
- **GET /models**: Список доступных моделей.
- **POST /predict**: Запуск предсказания.
- **GET /predictions/{id}**: Получение статуса предсказания.
- **POST /payment**: Пополнение баланса.
- **GET /balance**: Текущий баланс.
- **GET /transactions**: История транзакций.

Подробная документация доступна по адресу `http://localhost:8000/docs` после запуска сервера.

## Разработка

Для разработки и тестирования можно использовать следующие команды:

- Запуск FastAPI вручную:
  ```bash
  uvicorn main:app --reload
  ```

- Запуск Celery Worker:
  ```bash
  celery -A celery_app worker --loglevel=info
  ```

- Запуск Flower:
  ```bash
  celery -A celery_app flower
  ```

- Запуск Telegram-бота:
  ```bash
  python telegram_bot.py
  ```