import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    JobQueue,
    CallbackQueryHandler,
)
import httpx
from typing import Dict
import io

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"  # FastAPI —Å–µ—Ä–≤–µ—Ä
BOT_TOKEN = "7915019188:AAGDDX6Pi0MOhGmc6Q_5Dq0l_P3IuOrR9r0"  

# –¢–æ–∫–µ–Ω–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_tokens: Dict[int, str] = {}  # {telegram_id: jwt_token}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTER_USERNAME, REGISTER_PASSWORD, LOGIN_USERNAME, LOGIN_PASSWORD, PREDICT_MODEL_ID, PREDICT_FILE, PAYMENT = range(7)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! \n"
        "–Ø –±–æ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥—Ä–∏–±–æ–≤ üçÑ. \n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/register ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "/login ‚Äî –≤–æ–π—Ç–∏\n"
        "/models ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏\n"
        "/predict ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        "/balance ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/transactions ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "/payment ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /register: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç username –∏ password."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username:")
    return REGISTER_USERNAME

async def register_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç username –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å."""
    context.user_data["username"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return REGISTER_PASSWORD

async def register_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    username = context.user_data["username"]
    password = update.message.text
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"{API_BASE_URL}/register",
                data={"username": username, "password": password}
            )
            response.raise_for_status()
            await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")
        except httpx.HTTPStatusError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')}")
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    return ConversationHandler.END

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /login: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç username –∏ password."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username:")
    return LOGIN_USERNAME

async def login_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç username –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å."""
    context.user_data["username"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD

async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω."""
    username = context.user_data["username"]
    password = update.message.text
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"{API_BASE_URL}/token",
                data={"username": username, "password": password}
            )
            response.raise_for_status()
            token = response.json()["access_token"]
            user_tokens[update.effective_user.id] = token
            await update.message.reply_text("–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã.")
        except httpx.HTTPStatusError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')}")
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    return ConversationHandler.END

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /predict: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç model_id –∏ —Ñ–∞–π–ª."""
    if update.effective_user.id not in user_tokens:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.")
        return ConversationHandler.END
    reply_text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥—Ä–∏–±–æ–≤ üçÑ:\n"
        "1Ô∏è‚É£ Random Forest (1 —Ç–æ–∫–µ–Ω) ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–æ—á–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.\n"
        "2Ô∏è‚É£ Gradient Boosting (2 —Ç–æ–∫–µ–Ω–∞) ‚Äî –±–æ–ª–µ–µ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        "3Ô∏è‚É£ Neural Network (3 —Ç–æ–∫–µ–Ω–∞) ‚Äî –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ (1, 2 –∏–ª–∏ 3):"
    )
    await update.message.reply_text(reply_text)
    return PREDICT_MODEL_ID

async def predict_model_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç model_id –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–π–ª."""
    try:
        context.user_data["model_id"] = int(update.message.text)
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV –∏–ª–∏ XLSX —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏:")
        return PREDICT_FILE
    except ValueError:
        await update.message.reply_text("ID –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return PREDICT_MODEL_ID

async def predict_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ."""
    logger.info(f"User {update.effective_user.id} sent a file for prediction")
    if not update.message.document:
        logger.warning("No document received in predict_file")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV –∏–ª–∏ XLSX —Ñ–∞–π–ª.")
        return PREDICT_FILE

    model_id = context.user_data["model_id"]
    token = user_tokens.get(update.effective_user.id)
    document = update.message.document
    logger.info(f"Processing file: {document.file_name}, model_id: {model_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not document.file_name.lower().endswith(('.csv', '.xlsx')):
        logger.warning(f"Invalid file type: {document.file_name}")
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ XLSX.")
        return PREDICT_FILE

    async with httpx.AsyncClient() as client:
        try:
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            file_stream = io.BytesIO(file_content)
            files = {"file": (document.file_name, file_stream, "multipart/form-data")}
            logger.info(f"Sending predict request to {API_BASE_URL}/predict?model_id={model_id}")
            response = await client.post(
                f"{API_BASE_URL}/predict?model_id={model_id}",
                headers={"Authorization": f"Bearer {token}"},
                files=files
            )
            response.raise_for_status()
            prediction = response.json()
            logger.info(f"Prediction response: {prediction}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            required_fields = ["id", "task_id", "status"]
            missing_fields = [field for field in required_fields if field not in prediction]
            if missing_fields:
                logger.error(f"Missing fields in prediction response: {missing_fields}")
                await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return ConversationHandler.END

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            prediction_id = prediction["id"]
            message = (
                f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: {prediction_id}, Task ID: {prediction['task_id']}, –°—Ç–∞—Ç—É—Å: {prediction['status']}\n"
            )

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{prediction_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JobQueue
            if context.job_queue is not None:
                context.job_queue.run_repeating(
                    check_prediction_status,
                    interval=10,
                    first=10,
                    data={"prediction_id": prediction_id, "user_id": update.effective_user.id},
                    chat_id=update.effective_chat.id,
                    user_id=update.effective_user.id
                )
                message += "–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            else:
                logger.warning("JobQueue is not available, skipping status check")
                message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /status."

            await update.message.reply_text(message, reply_markup=reply_markup)

        except httpx.HTTPStatusError as e:
            error_detail = response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            logger.error(f"Prediction HTTP error: {e}, Status: {response.status_code}, Detail: {error_detail}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {error_detail}")
        except httpx.RequestError as e:
            logger.error(f"Network error in predict_file: {str(e)}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logger.error(f"Unexpected error in predict_file: {str(e)}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    context.user_data.clear()
    return ConversationHandler.END

async def check_prediction_status(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    job = context.job
    prediction_id = job.data["prediction_id"]
    user_id = job.data["user_id"]
    token = user_tokens.get(user_id)
    if not token:
        logger.warning(f"No token found for user {user_id}, stopping status check")
        job.schedule_removal()
        return

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{API_BASE_URL}/predictions/{prediction_id}",
                headers={"Authorization": f"Bearer {token}"}
            )
            response.raise_for_status()
            prediction = response.json()
            logger.info(f"Status check for prediction {prediction_id}: {prediction['status']}")
            if prediction["status"] in ["completed", "failed"]:
                result = prediction.get("result", "–û—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                await context.bot.send_message(
                    chat_id=job.chat_id,
                    text=(
                        f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ {prediction_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                        f"–°—Ç–∞—Ç—É—Å: {prediction['status']}\n"
                        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
                    )
                )
                job.schedule_removal()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        except httpx.HTTPStatusError as e:
            error_detail = response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            logger.error(f"Status check error for prediction {prediction_id}: {error_detail}")
            if response.status_code == 401:  # –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫
                await context.bot.send_message(
                    chat_id=job.chat_id,
                    text="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /login."
                )
                job.schedule_removal()
        except Exception as e:
            logger.error(f"Unexpected error in status check for prediction {prediction_id}: {str(e)}")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    if update.effective_user.id not in user_tokens:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.")
        return
    try:
        prediction_id = int(context.args[0])
        token = user_tokens[update.effective_user.id]
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{API_BASE_URL}/predictions/{prediction_id}",
                headers={"Authorization": f"Bearer {token}"}
            )
            response.raise_for_status()
            prediction = response.json()
            result = prediction.get("result", "–†–µ–∑—É–ª—å—Ç–∞—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤")
            await update.message.reply_text(
                f"–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {prediction_id}:\n"
                f"–°—Ç–∞—Ç—É—Å: {prediction['status']}\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
            )
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <prediction_id>")
    except httpx.HTTPStatusError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')}")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /balance: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å."""
    if update.effective_user.id not in user_tokens:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.")
        return
    token = user_tokens[update.effective_user.id]
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{API_BASE_URL}/balance",
                headers={"Authorization": f"Bearer {token}"}
            )
            response.raise_for_status()
            data = response.json()
            await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {data['balance']} —Ç–æ–∫–µ–Ω–æ–≤")
        except httpx.HTTPStatusError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')}")

async def transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /transactions: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
    if update.effective_user.id not in user_tokens:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.")
        return
    token = user_tokens[update.effective_user.id]
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{API_BASE_URL}/transactions",
                headers={"Authorization": f"Bearer {token}"}
            )
            response.raise_for_status()
            transactions = response.json()
            if not transactions:
                await update.message.reply_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            message = "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n"
            for t in transactions:
                message += f"ID: {t['id']}, –°—É–º–º–∞: {t['amount']}, –û–ø–∏—Å–∞–Ω–∏–µ: {t['description']}, –î–∞—Ç–∞: {t['created_at']}\n"
            await update.message.reply_text(message)
        except httpx.HTTPStatusError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')}")

async def payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /payment: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    if update.effective_user.id not in user_tokens:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.")
        return
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.0):")
    return PAYMENT

async def payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞."""
    try:
        amount = float(update.message.text)
        token = user_tokens[update.effective_user.id]
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_BASE_URL}/payment?amount={amount}",
                headers={"Authorization": f"Bearer {token}"}
            )
            response.raise_for_status()
            user = response.json()
            await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} —Ç–æ–∫–µ–Ω–æ–≤")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.0). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return PAYMENT
    except httpx.HTTPStatusError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')}")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def models(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in user_tokens:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.")
        return
    token = user_tokens[update.effective_user.id]
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{API_BASE_URL}/models",
                headers={"Authorization": f"Bearer {token}"}
            )
            response.raise_for_status()
            models = response.json()
            if not models:
                await update.message.reply_text("–ú–æ–¥–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                return
            message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"
            for m in models:
                message += f"ID: {m['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {m['name']}, –°—Ç–æ–∏–º–æ—Å—Ç—å: {m['cost']} —Ç–æ–∫–µ–Ω–æ–≤\n"
            await update.message.reply_text(message)
        except httpx.HTTPStatusError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É."""
    query = update.callback_query
    await query.answer()
    if query.data.startswith("status_"):
        try:
            prediction_id = int(query.data.replace("status_", ""))
            token = user_tokens.get(update.effective_user.id)
            if not token:
                await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.")
                return
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{API_BASE_URL}/predictions/{prediction_id}",
                    headers={"Authorization": f"Bearer {token}"}
                )
                response.raise_for_status()
                prediction = response.json()
                result = prediction.get("result", "–†–µ–∑—É–ª—å—Ç–∞—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤")
                await query.message.reply_text(
                    f"–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {prediction_id}:\n"
                    f"–°—Ç–∞—Ç—É—Å: {prediction['status']}\n"
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
                )
        except httpx.HTTPStatusError as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')}")
        except Exception as e:
            logger.error(f"Error in button_callback: {str(e)}")
            await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    try:
        # –°–æ–∑–¥–∞—ë–º Application
        builder = Application.builder().token(BOT_TOKEN)
        logger.info("Building Application with token")
        application = builder.build()
        logger.info(f"Application created: {application}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JobQueue
        if application.job_queue is None:
            logger.error("JobQueue is not initialized. Attempting manual initialization.")
            # –ü—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞—Ç—å JobQueue
            application.job_queue = JobQueue()
            application.job_queue.set_application(application)
            logger.info("Manually initialized JobQueue")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JobQueue —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω
        if application.job_queue is None:
            logger.error("Failed to initialize JobQueue. Configuration details:")
            logger.error(f"Application: {application}")
            logger.error(f"Bot token valid: {application.bot.token == BOT_TOKEN}")
            raise RuntimeError("JobQueue is not initialized. Check python-telegram-bot version (>=20.0) and configuration.")
        
        logger.info("JobQueue initialized successfully")
        application.add_handler(CommandHandler("models", models))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        register_conv = ConversationHandler(
            entry_points=[CommandHandler("register", register)],
            states={
                REGISTER_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_username)],
                REGISTER_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_password)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        login_conv = ConversationHandler(
            entry_points=[CommandHandler("login", login)],
            states={
                LOGIN_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_username)],
                LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        predict_conv = ConversationHandler(
            entry_points=[CommandHandler("predict", predict)],
            states={
                PREDICT_MODEL_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, predict_model_id)],
                PREDICT_FILE: [MessageHandler(filters.Document.ALL, predict_file)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        payment_conv = ConversationHandler(
            entry_points=[CommandHandler("payment", payment)],
            states={
                PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_amount)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(register_conv)
        application.add_handler(login_conv)
        application.add_handler(predict_conv)
        application.add_handler(payment_conv)
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("status", status))
        application.add_handler(CommandHandler("balance", balance))
        application.add_handler(CommandHandler("transactions", transactions))
        application.add_handler(CallbackQueryHandler(button_callback))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling()
    except Exception as e:
        logger.error(f"Failed to start bot: {str(e)}")
        raise


if __name__ == "__main__":
    main()